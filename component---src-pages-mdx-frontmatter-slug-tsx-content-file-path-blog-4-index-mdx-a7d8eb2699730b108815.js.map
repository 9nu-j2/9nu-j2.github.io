{"version":3,"file":"component---src-pages-mdx-frontmatter-slug-tsx-content-file-path-blog-4-index-mdx-a7d8eb2699730b108815.js","mappings":"+LAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,iBAClD,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,E,6BCLA,MAAMU,EAAWC,IAAsB,IAArB,KAACC,EAAI,SAAEC,GAAS,EAChC,OAAON,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoBO,EAAAA,EAAY,CACtEC,MAAOH,EAAKI,IAAIC,YAAYF,MAC5BG,cAAeN,EAAKI,IAAIC,YAAYC,cACpCN,KAAMA,IACJL,EAAAA,cAAoBY,EAAAA,EAAU,CAChCN,SAAUA,IACRN,EAAAA,cAAoBa,EAAAA,GAAQ,EAErBC,EAAOC,IAAA,IAAC,KAACV,GAAK,SAAKL,EAAAA,cAAoB,QAAS,KAAMK,EAAKI,IAAIC,YAAYF,MAAM,EAuB/E,SAASQ,EAAiBvB,GACvC,OAAOO,EAAAA,cAAoBG,EAAUV,EAAOO,EAAAA,cAAoBiB,EAAqBxB,GACvF,C,wDCjCA,MAaMyB,EAAYC,EAAAA,QAAOC,IAAG,YAAAC,YAAAA,sBAAAC,YAAAA,gBAAVH,CAAU,sHAStBI,EAAUJ,EAAAA,QAAOC,IAAG,YAAAC,YAAAA,oBAAAC,YAAAA,gBAAVH,CAAU,yDAM1B,IA5BiBf,IAAiC,IAAhC,SAAEE,GAAyB,EAEzC,OACIN,EAAAA,cAACkB,EAAS,KACNlB,EAAAA,cAACwB,EAAAA,GAAW,KACRxB,EAAAA,cAACuB,EAAO,KACHjB,IAGD,C,mGCRpB,MAUMY,EAAYC,EAAAA,QAAOC,IAAG,YAAAC,YAAAA,uBAAAC,YAAAA,gBAAVH,CAAU,mKAYtBM,EAAQN,EAAAA,QAAOC,IAAG,YAAAC,YAAAA,mBAAAC,YAAAA,gBAAVH,CAAU,4IAUlBO,EAAQP,EAAAA,QAAOQ,GAAE,YAAAN,YAAAA,mBAAAC,YAAAA,gBAATH,CAAS,yFAQjBS,EAAeT,EAAAA,QAAOtB,EAAC,YAAAwB,YAAAA,0BAAAC,YAAAA,gBAARH,CAAQ,+CAM7B,MA9CkBf,IAAyC,IAAxC,MAAEI,EAAK,cAAEG,GAA0B,EAClD,OACIX,EAAAA,cAACkB,EAAS,KACNlB,EAAAA,cAACyB,EAAK,KAACzB,EAAAA,cAAAA,MAAAA,KAAMW,GAAoB,gBAACkB,EAAAA,EAAW,CAACC,IAAI,+BAA+BC,IAAI,SAASC,MAAO,GAAGC,YAAAA,EAAAA,SACxGjC,EAAAA,cAAC0B,EAAK,KAAElB,GACRR,EAAAA,cAAC4B,EAAY,KAAC,YACN,ECHpB,MAAMM,EAAQ,CACVC,SAAU,WACVC,OAAQ,KACRJ,MAAO,OACPK,OAAQ,QACRC,qBAAsB,UAepBC,EAASpB,EAAAA,OAAOC,IAAG,YAAAC,YAAAA,qBAAAC,YAAAA,gBAAVH,CAAU,2HAUzB,MAtB6C,SAAU,GAAgC,IAAhC,MAAEX,EAAK,cAAEG,EAAa,KAAEN,GAAM,EACjF,MAAMmC,GAAQC,EAAAA,EAAAA,GAASpC,EAAKI,IAAIC,YAAYgC,YAE5C,OACI1C,EAAAA,cAACuC,EAAM,KACHvC,EAAAA,cAAC2C,EAAAA,EAAW,CAACH,MAAOA,EAAOT,IAAK1B,EAAKI,IAAIC,YAAYkC,eAAgBV,MAAOA,EAAOW,SAAU,CAAEC,SAAU,SAAUC,UAAW,WAC9H/C,EAAAA,cAACgD,EAAAA,EAAG,CAACxC,MAAO,SACZR,EAAAA,cAACiD,EAAS,CAACzC,MAAOA,EAAOG,cAAeA,IAGpD,C,8FCGO,MAAMuC,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBpD,GAC/B,MAAMqD,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfnD,EACFA,EAAWqD,GAGb,IAAIA,KAAsBrD,IAChC,CAACqD,EAAmBrD,GACzB,CAGA,MAAMsD,EAAc,CAAC,EAQd,SAAS7B,GAAY,WAACzB,EAAU,SAAEO,EAAQ,qBAAEgD,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfvD,EACHA,EAAW,CAAC,GACZA,GAAcsD,EAEJF,EAAiBpD,GAG5B,gBACLmD,EAAWM,SACX,CAACC,MAAOF,GACRjD,EAEJ,C","sources":["webpack://blog/./blog/4/index.mdx","webpack://blog/./src/Pages/{mdx.frontmatter__slug}.tsx","webpack://blog/./src/Components/Templates/Post.Body.tsx","webpack://blog/./src/Components/Organisms/About.Post.tsx","webpack://blog/./src/Components/Templates/Post.Header.tsx","webpack://blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.p, null, \"진짜 개패고 싶음\\n...\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/jun9/Desktop/JUN9.29/Project/9nu-j2.github.io/blog/4/index.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport PostHeader from '../Components/Templates/Post.Header';\nimport PostBody from '../Components/Templates/Post.Body';\nimport {DataProps} from 'Types/Types';\nimport Footer from '../Components/Organisms/Footer';\nconst BlogPost = ({data, children}) => {\n  return React.createElement(\"div\", null, React.createElement(PostHeader, {\n    title: data.mdx.frontmatter.title,\n    datePublished: data.mdx.frontmatter.datePublished,\n    data: data\n  }), React.createElement(PostBody, {\n    children: children\n  }), React.createElement(Footer));\n};\nexport const Head = ({data}) => React.createElement(\"title\", null, data.mdx.frontmatter.title);\nexport const query = graphql`\nquery ($id: String) {\n    mdx(id: { eq: $id }) {\n        frontmatter {\n            title\n            datePublished(formatString: \"YYYY-MM-D\")\n            author\n            slug\n            hero_image_alt\n            hero_image_credit_link\n            hero_image_credit_text\n            hero_image {\n                childImageSharp {\n                    gatsbyImageData\n                }\n            }\n        }\n        id\n    }\n}\n`;\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { MDXProvider } from \"@mdx-js/react\"\n\ninterface PostBodyProps {\n    children: JSX.Element;\n}\n\nconst PostBody = ({ children }: PostBodyProps) => {\n\n    return (\n        <Container>\n            <MDXProvider>\n                <MdxPart>\n                    {children}\n                </MdxPart>\n            </MDXProvider>\n        </Container>\n    )\n};\n\nconst Container = styled.div`\n    background: white;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-attachment: \"fixed\";\n`;\n\nconst MdxPart = styled.div`\n    width: 652px;\n    padding-top: 170px;\n    padding-bottom: 100px;\n`\n\nexport default PostBody;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { StaticImage } from 'gatsby-plugin-image';\n\ninterface PostProps {\n    title: string;\n    datePublished: string;\n}\n\nconst AboutPost = ({ title, datePublished }: PostProps) => {\n    return (\n        <Container>\n            <PostD><div>{datePublished}</div><StaticImage src=\"../../Statics/Icons/time.png\" alt=\"onTime\" width={21} /></PostD>\n            <PostH>{title}</PostH>\n            <PostContents>내용 요약입니다</PostContents>\n        </Container>\n    )\n};\n\nconst Container = styled.div`\n    background: transparent;\n    width: 600px;\n    height: 800px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    align-items: center;\n    gap: 20px;\n    padding-bottom: 150px;\n`;\n\nconst PostD = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    color: white;\n    text-shadow: 0 0 0.2rem black;\n    width: 125px;\n`\n\nconst PostH = styled.h1`\n    margin:0;\n    font-weight: 800;\n    font-size: 2.6rem;\n    color: white;\n    text-shadow: 0 0 0.2rem black;\n`\n\nconst PostContents = styled.p`\n    color: white;\n    text-shadow: 0 0 0.2rem black;\n`\n\n\nexport default AboutPost;","import React, { FunctionComponent } from 'react'\nimport { styled, keyframes } from 'styled-components';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport Nav from '../Organisms/Navbar'\nimport AboutPost from '../Organisms/About.Post';\n\ntype HProp = {\n    title: string;\n    datePublished: string;\n    data: any;\n}\n\nconst style = {\n    position: \"absolute\",\n    zIndex: \"-1\",\n    width: \"100%\",\n    height: \"100vh\",\n    backgroundAttachment: \"scroll\"\n}\n\nconst PostHeader: FunctionComponent<HProp> = function ({ title, datePublished, data }) {\n    const image = getImage(data.mdx.frontmatter.hero_image)\n\n    return (\n        <Header>\n            <GatsbyImage image={image} alt={data.mdx.frontmatter.hero_image_alt} style={style} imgStyle={{ overflow: \"hidden\", objectFit: \"cover\" }} />\n            <Nav title={\"아직미정\"}></Nav>\n            <AboutPost title={title} datePublished={datePublished} />\n        </Header>\n    )\n};\n\nconst Header = styled.div`\n    width: 100%;\n    height: 100vh;\n    display: flex;\n    gap: 12px;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n`\n\nexport default PostHeader","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","BlogPost","_ref","data","children","PostHeader","title","mdx","frontmatter","datePublished","PostBody","Footer","Head","_ref2","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Container","styled","div","displayName","componentId","MdxPart","MDXProvider","PostD","PostH","h1","PostContents","StaticImage","src","alt","width","__imageData","style","position","zIndex","height","backgroundAttachment","Header","image","getImage","hero_image","GatsbyImage","hero_image_alt","imgStyle","overflow","objectFit","Nav","AboutPost","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}