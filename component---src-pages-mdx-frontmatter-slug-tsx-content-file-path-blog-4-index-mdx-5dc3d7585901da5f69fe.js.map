{"version":3,"file":"component---src-pages-mdx-frontmatter-slug-tsx-content-file-path-blog-4-index-mdx-5dc3d7585901da5f69fe.js","mappings":"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","sources":["webpack://blog/./blog/4/index.mdx","webpack://blog/./src/Pages/{mdx.frontmatter__slug}.tsx","webpack://blog/./src/Components/Organisms/Navbar.tsx","webpack://blog/./src/Components/Templates/Post.Body.tsx","webpack://blog/./src/Components/Organisms/About.Post.tsx","webpack://blog/./src/Components/Templates/Post.Header.tsx","webpack://blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"협업을 안해본 부서에 협업 체계 도입하기\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"시니어가 없는 신생 개발부서에 신입으로 들어와 이리 저리 구르며 도입했던 내용을 정리해보려고 합니다.\"), \"\\n\", React.createElement(_components.p, null, \"타임라인 순으로 정리하겠습니다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/jun9/Desktop/JUN9.29/Project/9nu-j2.github.io/blog/4/index.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport PostHeader from '../Components/Templates/Post.Header';\nimport PostBody from '../Components/Templates/Post.Body';\nimport {DataProps} from 'Types/Types';\nimport Footer from '../Components/Organisms/Footer';\nconst BlogPost = ({data, children}) => {\n  return React.createElement(\"div\", null, React.createElement(PostHeader, {\n    title: data.mdx.frontmatter.title,\n    datePublished: data.mdx.frontmatter.datePublished,\n    data: data\n  }), React.createElement(PostBody, {\n    children: children\n  }), React.createElement(Footer));\n};\nexport const Head = ({data}) => React.createElement(\"title\", null, data.mdx.frontmatter.title);\nexport const query = graphql`\nquery ($id: String) {\n    mdx(id: { eq: $id }) {\n        frontmatter {\n            title\n            datePublished(formatString: \"YYYY-MM-D\")\n            author\n            slug\n            hero_image_alt\n            hero_image_credit_link\n            hero_image_credit_text\n            hero_image {\n                childImageSharp {\n                    gatsbyImageData\n                }\n            }\n            summary\n        }\n        id\n    }\n}\n`;\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import React, { FunctionComponent, useState, useEffect } from 'react'\nimport styled from 'styled-components';\nimport Title from '../Atoms/Blog.title';\nimport Categories from '../Molecules/Categories';\n\n\nconst Nav: FunctionComponent = function () {\n    const [scrollPosition, setScrollPosition] = useState(0);\n    const [headerColor, setHeaderColor] = useState(\"#ffffff\");\n    const [logoType, setLogoType] = useState(true);\n    const [bottomBorder, setBottomBorder] = useState(\"transparent\");\n    const [vh, setVh] = useState(0);\n\n    const updateScroll = () => {\n        setScrollPosition(window.scrollY || document.documentElement.scrollTop);\n    };\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", updateScroll);\n        return () => {\n            window.removeEventListener(\"scroll\", updateScroll);\n        };\n    }, []);\n\n    useEffect(() => {\n        setVh(window.innerHeight * 0.01);\n    }, [scrollPosition]);\n\n    useEffect(() => {\n        if (scrollPosition <= 100 * vh) {\n            setHeaderColor(\"transparent\");\n            setBottomBorder(\"none\");\n            setLogoType(true);\n        } else {\n            setHeaderColor(\"#ffffff\");\n            setBottomBorder(\"#DFDFDF\");\n            setLogoType(false);\n        }\n    }, [scrollPosition]);\n    return (\n        <NavStyle headercolor={headerColor} bottom={bottomBorder}>\n            <RealNav>\n                <Title title={logoType}></Title>\n                <Categories></Categories>\n            </RealNav>\n        </NavStyle>\n    )\n}\n\nconst NavStyle = styled.nav<{ headercolor: string, bottom: string }>`\n    position: fixed;\n    top:0;\n    left: 50%;\n    transform: translate(-50%, 0%);\n    width: 100vw;\n    height: 60px;\n    z-index:3;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border: solid ${(props) => props.bottom};\n    border-width: 0 0 1px 0;\n    background-color: ${(props) => props.headercolor};\n    transition: background-color 0.1s ease-out;\n`;\n\nconst RealNav = styled.div`\n    width: 100%;\n    height: 40px;\n    max-width: 980px;\n    display: flex;\n    justify-content: space-between;\n`\n\nexport default Nav;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { MDXProvider } from \"@mdx-js/react\"\n\ninterface PostBodyProps {\n    children: JSX.Element;\n}\n\nconst PostBody = ({ children }: PostBodyProps) => {\n\n    return (\n        <Container>\n            <MDXProvider>\n                <MdxPart>\n                    {children}\n                </MdxPart>\n            </MDXProvider>\n        </Container>\n    )\n};\n\nconst Container = styled.div`\n    background: white;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-attachment: \"fixed\";\n`;\n\nconst MdxPart = styled.div`\n    width: 700px;\n    padding-top: 170px;\n    padding-bottom: 100px;\n`\n\nexport default PostBody;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { StaticImage } from 'gatsby-plugin-image';\n\ninterface PostProps {\n    title: string;\n    datePublished: string;\n    summary: string;\n}\n\nconst AboutPost = ({ title, datePublished, summary }: PostProps) => {\n    return (\n        <Container>\n            <PostD><div>{datePublished}</div><StaticImage src=\"../../Statics/Icons/time.png\" alt=\"onTime\" width={21} /></PostD>\n            <PostH>{title}</PostH>\n            <PostContents>{summary}</PostContents>\n        </Container>\n    )\n};\n\nconst Container = styled.div`\n    background: transparent;\n    width: 600px;\n    height: 800px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    align-items: flex-start;\n    gap: 20px;\n    padding-bottom: 150px;\n`;\n\nconst PostD = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    color: white;\n    text-shadow: 0 0 0.2rem black;\n    width: 125px;\n`\n\nconst PostH = styled.h1`\n    margin:0;\n    font-weight: 800;\n    font-size: 2.6rem;\n    color: white;\n    text-shadow: 0 0 0.2rem black;\n`\n\nconst PostContents = styled.p`\n    color: white;\n    text-shadow: 0 0 0.2rem black;\n`\n\n\nexport default AboutPost;","import React, { FunctionComponent } from 'react'\nimport { styled, keyframes } from 'styled-components';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport Nav from '../Organisms/Navbar'\nimport AboutPost from '../Organisms/About.Post';\n\ntype HProp = {\n    title: string;\n    datePublished: string;\n    data: any;\n}\n\nconst style = {\n    position: \"absolute\",\n    zIndex: \"-1\",\n    width: \"100%\",\n    height: \"100vh\",\n    backgroundAttachment: \"scroll\",\n    filter: \"brightness(0.67)\"\n}\n\nconst PostHeader: FunctionComponent<HProp> = function ({ title, datePublished, data }) {\n    const image = getImage(data.mdx.frontmatter.hero_image)\n\n    return (\n        <Header>\n            <GatsbyImage image={image} alt={data.mdx.frontmatter.hero_image_alt} style={style} imgStyle={{ overflow: \"hidden\", objectFit: \"cover\" }} />\n            <Nav></Nav>\n            <AboutPost title={title} datePublished={datePublished} summary={data.mdx.frontmatter.summary} />\n        </Header>\n    )\n};\n\nconst Header = styled.div`\n    width: 100%;\n    height: 100vh;\n    display: flex;\n    gap: 12px;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n`\n\nexport default PostHeader","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","_provideComponents","components","React","wrapper","MDXLayout","BlogPost","_ref","data","children","PostHeader","title","mdx","frontmatter","datePublished","PostBody","Footer","Head","_ref2","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","NavStyle","styled","nav","bottom","headercolor","RealNav","div","scrollPosition","setScrollPosition","useState","headerColor","setHeaderColor","logoType","setLogoType","bottomBorder","setBottomBorder","vh","setVh","updateScroll","window","scrollY","document","documentElement","scrollTop","useEffect","addEventListener","removeEventListener","innerHeight","Title","Categories","Container","MdxPart","MDXProvider","PostD","PostH","PostContents","summary","StaticImage","src","alt","width","style","position","zIndex","height","backgroundAttachment","filter","Header","image","getImage","hero_image","GatsbyImage","hero_image_alt","imgStyle","overflow","objectFit","Nav","AboutPost","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}