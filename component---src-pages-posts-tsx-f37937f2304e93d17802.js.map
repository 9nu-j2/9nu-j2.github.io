{"version":3,"file":"component---src-pages-posts-tsx-f37937f2304e93d17802.js","mappings":"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","sources":["webpack://blog/./src/Components/Organisms/Drawer.tsx","webpack://blog/./src/states/atom.tsx","webpack://blog/./src/Components/Organisms/Tags.List.tsx","webpack://blog/./src/Components/Templates/Tags.Header.tsx","webpack://blog/./src/Hooks/useInfiniteScroll.tsx","webpack://blog/./src/Components/Organisms/Infinite.Scroll.tsx","webpack://blog/./src/Pages/posts.tsx"],"sourcesContent":["import React from 'react'\nimport { styled, keyframes } from 'styled-components';\nimport { Link } from \"gatsby\"\nimport { GatsbyImage, getImage, StaticImage } from 'gatsby-plugin-image'\n\nconst Drawer = ({ title, date, link, thumnail, thumnailAlt }) => {\n    const image = getImage(thumnail);\n\n    const style = {\n        height: \"300px\",\n        width: \"300px\",\n        backgroundColor: \"#f2f2f2\",\n        borderRadius: \"15px\",\n    }\n    return (\n        <Link to={`/${link}`} style={{ textDecoration: \"none\" }}>\n            <CardContainer>\n                <GatsbyImage image={image} alt={thumnailAlt} style={style} imgStyle={{ overflow: \"hidden\", objectFit: \"cover\" }} />\n                <NameCard>\n                    <h2>{title}</h2>\n                    <TimePart>\n                        <div>{date}</div>\n                        <StaticImage src=\"../../Statics/Icons/time.png\" alt=\"onTime\" style={{ width: \"19px\", height: \"16px\" }} imgStyle={{ objectFit: \"fill\" }} />\n                    </TimePart>\n                </NameCard>\n            </CardContainer>\n        </Link>\n    )\n}\n\nconst CardContainer = styled.section`\n    height: 300px;\n    width: 770px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    border-color: black;\n`\n\nconst NameCard = styled.div`\n    height:100%;\n    width: 400px;\n    background: white;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: flex-start;\n    color: black;\n    padding-top: 40px;\n    padding-bottom: 50px;\n`\n\nconst TimePart = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    width: 100%;\n    gap: 8px;\n`\n\nexport default Drawer","import { atom } from \"recoil\";\n\nexport const selectedCategory = atom({\n    key: \"selectedCategory\",\n    default: \"All\"\n});","import React, { useState, useEffect } from 'react'\nimport { Link, PageProps } from \"gatsby\";\nimport { styled, keyframes } from 'styled-components';\nimport { useRecoilState } from \"recoil\";\nimport { selectedCategory } from \"../../states/atom\";\n\ntype TagsPageData = {\n    allMdx: {\n        group: {\n            totalCount: number;\n            fieldValue: string;\n        }[];\n    };\n};\n\nconst TagsList = ({ data }: PageProps<TagsPageData>) => {\n    const tags = data.allMdx.group.sort((a, b) => b.totalCount - a.totalCount);\n    const [category, setCategory] = useRecoilState(selectedCategory);\n\n    const select = (value: string) => {\n        setCategory(value);\n    }\n\n    return (\n        <Layout>\n            <h1>TAGS</h1>\n            <TagListStyle>\n                {tags.map((tag) => (\n                    <div onClick={() => select(tag.fieldValue)} style={{ textDecoration: \"none\", color: \"white\", cursor: \"pointer\" }}>\n                        {category === tag.fieldValue ?\n                            (<TagListReverse key={tag.fieldValue}>\n                                <Pstyle>{`${tag.fieldValue}`}</Pstyle>\n                            </TagListReverse>) :\n                            (<TagList key={tag.fieldValue}>\n                                <Pstyle>{`${tag.fieldValue}`}</Pstyle>\n                            </TagList>)\n                        }\n                    </div>\n                ))}\n            </TagListStyle>\n        </Layout>\n    );\n};\n\nconst Layout = styled.div`\n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    align-items: center;\n`\n\nconst TagListStyle = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(auto-fill,minmax(100px, auto));\n    grid-auto-rows: auto;\n    width: 800px;\n    gap: 10px 10px;\n    grid-auto-flow: dense;\n    text-decoration: none;\n    margin: 0;\n    padding-bottom: 60px;\n    padding-top: 30px;\n`\n\nconst TagList = styled.li`\n    display: flex;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n    background: #2c4866;\n    border-radius: 5px;\n\n    &:hover {\n        border-color: #2c4866;\n        background: white;\n        border: 1px;\n        color: #2c4866;\n    }\n`\n\nconst TagListReverse = styled.li`\n    display: flex;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n    background: white;\n    color: #2c4866;\n    border: 1.5px;\n    border-style:solid;\n    border-color: #2c4866;\n    border-radius: 5px;\n`\n\nconst Pstyle = styled.p`\n    padding: 0px;\n    margin: 0px;\n`\n\nexport default TagsList;","import React, { FunctionComponent } from 'react'\nimport { styled, keyframes } from 'styled-components';\nimport Nav from '../Organisms/Navbar'\nimport TagsList from '../Organisms/Tags.List'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\n\nconst TagsHeader: FunctionComponent = ({ data }) => {\n    return (\n        <Header>\n            <Nav title={data.site.siteMetadata.title}></Nav>\n            <TagsList data={data}></TagsList>\n        </Header>\n    )\n}\n\nconst Header = styled.div`\n    width: 100%;\n    height: 50vh;\n    display: flex;\n    gap: 12px;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n`\n\nexport default TagsHeader","import { MutableRefObject, useState, useRef, useMemo, useEffect } from 'react'\n\nconst NUMBER_OF_ITEMS_PER_PAGE = 2\n\nconst useInfiniteScroll = (\n    selectedCategory,\n    posts,\n) => {\n    const containerRef: MutableRefObject<HTMLDivElement | null> = useRef<HTMLDivElement>(\n        null,\n    )\n    const [count, setCount] = useState<number>(1)\n\n    const postListByCategory = useMemo(\n        () =>\n            posts.filter(({ frontmatter: { tags } }) =>\n                selectedCategory !== 'All'\n                    ? tags.includes(selectedCategory)\n                    : true,\n            ),\n        [selectedCategory],\n    )\n\n    const observer: IntersectionObserver = new IntersectionObserver(\n        (entries, observer) => {\n            if (!entries[0].isIntersecting) return;\n            setCount(value => value + 1);\n            observer.disconnect();\n        },\n    )\n\n    useEffect(() => setCount(1), [selectedCategory])\n\n    useEffect(() => {\n        if (\n            NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\n            containerRef.current === null ||\n            containerRef.current.children.length === 0\n        ) return;\n\n        observer.observe(\n            containerRef.current.children[containerRef.current.children.length - 1],\n        )\n    }, [count, selectedCategory])\n\n    return { containerRef, postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE), }\n}\n\nexport default useInfiniteScroll","import React from 'react'\nimport styled from 'styled-components';\nimport { useRecoilState, useResetRecoilState } from \"recoil\";\nimport { selectedCategory } from \"../../states/atom\";\nimport useInfiniteScroll from '../../Hooks/useInfiniteScroll';\nimport Drawer from '../Organisms/Drawer';\n\nconst InfiniteScroll = ({ data }) => {\n    const posts = data.allMdx.nodes\n    const [category, setCategory] = useRecoilState(selectedCategory);\n    const { containerRef, postList } = useInfiniteScroll(category, posts)\n    return (\n        <LatestListContainer ref={containerRef}>\n            {\n                postList.map(\n                    (node) => (\n                        <LiContainer key={node.id}>\n                            <Drawer title={node.frontmatter.title} date={node.frontmatter.datePublished} link={node.frontmatter.slug} thumnail={node.frontmatter.hero_image} thumnailAlt={node.frontmatter.hero_image_alt}></Drawer>\n                        </LiContainer>\n                    )\n                )\n            }\n        </LatestListContainer>)\n}\n\nconst LatestListContainer = styled.ul`\n    width: 100vw;\n    list-style-type: none;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding-bottom: 100px;\n`\n\nconst LiContainer = styled.li`\n    padding:60px 0 0 0;\n    margin:0;\n`\n\nexport default InfiniteScroll","import React from 'react'\nimport type { HeadProps } from \"gatsby\"\nimport { Link, PageProps, graphql } from \"gatsby\"\nimport { RecoilRoot } from 'recoil';\nimport TagsHeader from '../Components/Templates/Tags.Header'\nimport Footer from '../Components/Organisms/Footer'\nimport { DataProps } from 'Types/Types';\nimport InfiniteScroll from '../Components/Organisms/Infinite.Scroll'\n\nconst MainPage = ({ data }: PageProps) => {\n    return (\n        <main>\n            <RecoilRoot>\n                <TagsHeader data={data}></TagsHeader>\n                <InfiniteScroll data={data}></InfiniteScroll>\n                <Footer></Footer>\n            </RecoilRoot>\n        </main>\n    )\n}\n\nexport default MainPage\n\nexport function Head(props: HeadProps<DataProps>) {\n    return (\n        <title>{props.data.site.siteMetadata.author}</title>\n    )\n}\n\nexport const query = graphql`\nquery{\n    site {\n        siteMetadata {\n            title\n            description\n            author\n        }\n    }\n    allMdx {\n        group(field: { frontmatter: { tags: SELECT } }) {\n            fieldValue\n            totalCount\n        }\n        nodes {\n            frontmatter {\n                title\n                datePublished(formatString: \"YYYY.MM.D\")\n                author\n                slug\n                tags\n                hero_image_alt\n                hero_image_credit_link\n                hero_image_credit_text\n                hero_image {\n                    childImageSharp{\n                        gatsbyImageData\n                    }\n                }\n            }\n            id\n        }\n    }\n}\n`"],"names":["CardContainer","styled","section","displayName","componentId","NameCard","div","TimePart","_ref","title","date","link","thumnail","thumnailAlt","image","getImage","React","Link","to","style","textDecoration","GatsbyImage","alt","height","width","backgroundColor","borderRadius","imgStyle","overflow","objectFit","StaticImage","src","__imageData","selectedCategory","atom","key","default","Layout","TagListStyle","ul","TagList","li","TagListReverse","Pstyle","p","data","tags","allMdx","group","sort","a","b","totalCount","category","setCategory","useRecoilState","map","tag","onClick","select","value","fieldValue","color","cursor","Header","Nav","site","siteMetadata","TagsList","posts","containerRef","useRef","count","setCount","useState","postListByCategory","useMemo","filter","frontmatter","includes","observer","IntersectionObserver","entries","isIntersecting","disconnect","useEffect","length","current","children","observe","postList","slice","LatestListContainer","LiContainer","nodes","useInfiniteScroll","ref","node","id","Drawer","datePublished","slug","hero_image","hero_image_alt","RecoilRoot","TagsHeader","InfiniteScroll","Footer","Head","props","author"],"sourceRoot":""}